// Generated by LiveScript 1.4.0
(function(){
  var configDefaults, configValidate, compile, getExtensions;
  configDefaults = function(){
    return {
      livescriptxml: {
        extensions: ['ls', 'lsx'],
        options: {
          bare: true
        }
      }
    };
  };
  configValidate = function(config, validators){
    var errors;
    errors = [];
    if (validators.ifExistsIsObject(errors, "livescriptxml config", config.livescriptxml)) {
      if (validators.isArrayOfStringsMustExist(errors, 'livescriptxml.extensions', config.livescriptxml.extensions)) {
        if (config.livescriptxml.extensions.length === 0) {
          errors.push("livescriptxml.extensions cannot be an empty array");
        }
      }
    }
    return errors;
  };
  compile = function(mimosaConfig, file, cb){
    var code, options, coffeeReact, livescript, output, error;
    code = file.inputFileText;
    options = Object.create(mimosaConfig.livescriptxml.options);
    coffeeReact = require('coffee-react-transform');
    livescript = require('livescript');
    output = (function(){
      try {
        return livescript.compile(coffeeReact(code), options);
      } catch (e$) {
        return error = e$.error, e$;
      }
    }());
    return cb(error, output);
  };
  getExtensions = function(mimosaConfig){
    return mimosaConfig.livescriptxml.extensions;
  };
  module.exports = {
    name: 'livescriptxml',
    compilerType: 'javascript',
    extensions: getExtensions,
    compile: compile,
    defaults: configDefaults,
    validate: configValidate
  };
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvdGFrYXRhL0dpdEh1Yi9ucG0vbWltb3NhLWxpdmVzY3JpcHQteG1sL2xhYi9pbmRleC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFBQSxjQUFnQixDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUE7V0FDZDtNQUFBLGVBQ0k7UUFBQSxZQUFZLENBQUUsTUFBSyxLQUFQO1FBQ1osU0FDSTtVQUFBLE1BQU07UUFBTjtNQUZKO0lBREo7O0VBTUosY0FBZ0IsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLE1BQUEsRUFBQSxVQUFBOztJQUNkLE1BQU8sQ0FBQSxDQUFBLENBQUU7SUFFVCxJQUFJLFVBQVUsQ0FBQyxnQkFBZixDQUFnQyxNQUFoQyxFQUE4RCxzQkFBOUQsRUFBZ0UsTUFBTSxDQUFDLGFBQXZDLENBQWhDO01BRUksSUFBRyxVQUFVLENBQUMseUJBQWQsQ0FBd0MsTUFBeEMsRUFBZ0QsMEJBQWhELEVBQTJFLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBeEQsQ0FBeEM7UUFFSSxJQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU8sQ0FBQSxHQUFBLENBQUcsQ0FBN0M7VUFDSSxNQUFNLENBQUMsS0FBd0QsbURBQUE7Ozs7SUFFM0UsTUFBQSxDQUFPLE1BQVA7O0VBR0osT0FBUSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsWUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBOztJQUNBLElBQWEsQ0FBQSxDQUFBLENBQUUsSUFBSSxDQUFDO0lBQ3BCLE9BQWEsQ0FBQSxDQUFBLENBQUUsTUFBTSxDQUFDLE9BQU8sWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUEzQjtJQUM3QixXQUFhLENBQUEsQ0FBQSxDQUFFLFFBQVEsd0JBQUE7SUFDdkIsVUFBYSxDQUFBLENBQUEsQ0FBRSxRQUFRLFlBQUE7SUFFN0IsTUFBTyxDQUFBLENBQUE7TUFBRTtlQUNMLFVBQVUsQ0FBQyxRQUFVLFlBQWEsSUFBQSxHQUFRLE9BQXZCO09BQ3ZCO2VBQU8sV0FBQTs7O1dBRVAsR0FBRyxPQUFPLE1BQVA7O0VBR1AsYUFBZSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsWUFBQTtXQUNiLFlBQVksQ0FBQyxhQUFhLENBQUM7O0VBRy9CLE1BQU0sQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUNYO0lBQUEsTUFBYztJQUNkLGNBQWM7SUFDZCxZQUFjO0lBQ2QsU0FBYztJQUNkLFVBQWM7SUFDZCxVQUFjO0VBTGQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25maWctZGVmYXVsdHMgPSAtPlxuICAgIGxpdmVzY3JpcHR4bWw6XG4gICAgICAgIGV4dGVuc2lvbnM6IFsgXFxscywgXFxsc3ggXVxuICAgICAgICBvcHRpb25zOlxuICAgICAgICAgICAgYmFyZTogdHJ1ZVxuXG5cbmNvbmZpZy12YWxpZGF0ZSA9IChjb25maWcsIHZhbGlkYXRvcnMpIC0+XG4gICAgZXJyb3JzID0gW11cblxuICAgIGlmICB2YWxpZGF0b3JzLmlmRXhpc3RzSXNPYmplY3QgZXJyb3JzLCBcImxpdmVzY3JpcHR4bWwgY29uZmlnXCIsIGNvbmZpZy5saXZlc2NyaXB0eG1sXG5cbiAgICAgICAgaWYgdmFsaWRhdG9ycy5pc0FycmF5T2ZTdHJpbmdzTXVzdEV4aXN0IGVycm9ycywgXFxsaXZlc2NyaXB0eG1sLmV4dGVuc2lvbnMsIGNvbmZpZy5saXZlc2NyaXB0eG1sLmV4dGVuc2lvbnNcblxuICAgICAgICAgICAgaWYgY29uZmlnLmxpdmVzY3JpcHR4bWwuZXh0ZW5zaW9ucy5sZW5ndGggaXMgMFxuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoIFwibGl2ZXNjcmlwdHhtbC5leHRlbnNpb25zIGNhbm5vdCBiZSBhbiBlbXB0eSBhcnJheVwiXG5cbiAgICByZXR1cm4gZXJyb3JzXG5cblxuY29tcGlsZSA9ICggbWltb3NhQ29uZmlnLCBmaWxlLCBjYiApIC0+XG4gICAgY29uc3QgY29kZSAgICAgICAgID0gZmlsZS5pbnB1dEZpbGVUZXh0XG4gICAgICAgICAgb3B0aW9ucyAgICAgID0gT2JqZWN0LmNyZWF0ZSBtaW1vc2FDb25maWcubGl2ZXNjcmlwdHhtbC5vcHRpb25zXG4gICAgICAgICAgY29mZmVlLXJlYWN0ID0gcmVxdWlyZSBcXGNvZmZlZS1yZWFjdC10cmFuc2Zvcm1cbiAgICAgICAgICBsaXZlc2NyaXB0ICAgPSByZXF1aXJlIFxcbGl2ZXNjcmlwdFxuXG4gICAgb3V0cHV0ID0gdHJ5XG4gICAgICAgIGxpdmVzY3JpcHQuY29tcGlsZSAoIGNvZmZlZS1yZWFjdCBjb2RlICksIG9wdGlvbnNcbiAgICBjYXRjaCB7ZXJyb3J9XG5cbiAgICBjYiBlcnJvciwgb3V0cHV0XG5cblxuZ2V0RXh0ZW5zaW9ucyAgPSAoIG1pbW9zYUNvbmZpZyApIC0+XG4gICAgbWltb3NhQ29uZmlnLmxpdmVzY3JpcHR4bWwuZXh0ZW5zaW9uc1xuXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICBuYW1lOiAgICAgICAgIFxcbGl2ZXNjcmlwdHhtbFxuICAgIGNvbXBpbGVyVHlwZTogXFxqYXZhc2NyaXB0XG4gICAgZXh0ZW5zaW9uczogICBnZXRFeHRlbnNpb25zXG4gICAgY29tcGlsZTogICAgICBjb21waWxlXG4gICAgZGVmYXVsdHM6ICAgICBjb25maWctZGVmYXVsdHNcbiAgICB2YWxpZGF0ZTogICAgIGNvbmZpZy12YWxpZGF0ZVxuIl19
