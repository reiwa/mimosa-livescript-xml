// Generated by LiveScript 1.4.0
(function(){
  var configDefaults, configValidate, compile, getExtensions;
  configDefaults = function(){
    return {
      livereact: {
        extensions: ['ls', 'lsx'],
        options: {
          bare: true
        }
      }
    };
  };
  configValidate = function(config, validators){
    var errors;
    errors = [];
    if (validators.ifExistsIsObject(errors, "lsx config", config.lsx)) {
      if (validators.isArrayOfStringsMustExist(errors, 'lsx.extensions', config.lsx.extensions)) {
        if (config.lsx.extensions.length === 0) {
          errors.push("lsx.extensions cannot be an empty array");
        }
      }
    }
    return errors;
  };
  compile = function(mimosaConfig, file, cb){
    var code, options, coffeeReact, livescript, output, error;
    code = file.inputFileText;
    options = mimosaConfig.lsx.options;
    coffeeReact = require('coffee-react-transform');
    livescript = require('livescript');
    output = (function(){
      try {
        return livescript.compile(coffeeReact(code), options);
      } catch (e$) {
        return error = e$.error, e$;
      }
    }());
    return cb(error, output);
  };
  getExtensions = function(mimosaConfig){
    return mimosaConfig.lsx.extensions;
  };
  module.exports = {
    name: 'lsx',
    compilerType: 'javascript',
    extensions: getExtensions,
    compile: compile,
    defaults: configDefaults,
    validate: configValidate
  };
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvdGFrYXRhL0xpYnJhcnkvTW9iaWxlIERvY3VtZW50cy9jb21+YXBwbGV+Q2xvdWREb2NzL0dpdEh1Yi9ucG0vbWltb3NhLWxpdmVyZWFjdC9sYWIvaW5kZXgubHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0VBQUEsY0FBZ0IsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBO1dBQ2Q7TUFBQSxXQUNJO1FBQUEsWUFBWSxDQUFFLE1BQUssS0FBUDtRQUNaLFNBQ0k7VUFBQSxNQUFNO1FBQU47TUFGSjtJQURKOztFQU1KLGNBQWdCLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxNQUFBLEVBQUEsVUFBQTs7SUFDZCxNQUFPLENBQUEsQ0FBQSxDQUFFO0lBRVQsSUFBSSxVQUFVLENBQUMsZ0JBQWYsQ0FBZ0MsTUFBaEMsRUFBb0QsWUFBcEQsRUFBc0QsTUFBTSxDQUFDLEdBQTdCLENBQWhDO01BRUksSUFBRyxVQUFVLENBQUMseUJBQWQsQ0FBd0MsTUFBeEMsRUFBZ0QsZ0JBQWhELEVBQWlFLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBcEMsQ0FBeEM7UUFFSSxJQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU8sQ0FBQSxHQUFBLENBQUcsQ0FBbkM7VUFDSSxNQUFNLENBQUMsS0FBOEMseUNBQUE7Ozs7SUFFakUsTUFBQSxDQUFPLE1BQVA7O0VBR0osT0FBUSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsWUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBOztJQUNBLElBQWEsQ0FBQSxDQUFBLENBQUUsSUFBSSxDQUFDO0lBQ3BCLE9BQWEsQ0FBQSxDQUFBLENBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQztJQUNoQyxXQUFhLENBQUEsQ0FBQSxDQUFFLFFBQVEsd0JBQUE7SUFDdkIsVUFBYSxDQUFBLENBQUEsQ0FBRSxRQUFRLFlBQUE7SUFFN0IsTUFBTyxDQUFBLENBQUE7TUFBRTtlQUNMLFVBQVUsQ0FBQyxRQUFVLFlBQWEsSUFBQSxHQUFRLE9BQXZCO09BQ3ZCO2VBQU8sV0FBQTs7O1dBRVAsR0FBRyxPQUFPLE1BQVA7O0VBR1AsYUFBZSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsWUFBQTtXQUNiLFlBQVksQ0FBQyxHQUFHLENBQUM7O0VBR3JCLE1BQU0sQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUNYO0lBQUEsTUFBYztJQUNkLGNBQWM7SUFDZCxZQUFjO0lBQ2QsU0FBYztJQUNkLFVBQWM7SUFDZCxVQUFjO0VBTGQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25maWctZGVmYXVsdHMgPSAtPlxuICAgIGxpdmVyZWFjdDpcbiAgICAgICAgZXh0ZW5zaW9uczogWyBcXGxzLCBcXGxzeCBdXG4gICAgICAgIG9wdGlvbnM6XG4gICAgICAgICAgICBiYXJlOiB0cnVlXG5cblxuY29uZmlnLXZhbGlkYXRlID0gKGNvbmZpZywgdmFsaWRhdG9ycykgLT5cbiAgICBlcnJvcnMgPSBbXVxuXG4gICAgaWYgIHZhbGlkYXRvcnMuaWZFeGlzdHNJc09iamVjdCBlcnJvcnMsIFwibHN4IGNvbmZpZ1wiLCBjb25maWcubHN4XG5cbiAgICAgICAgaWYgdmFsaWRhdG9ycy5pc0FycmF5T2ZTdHJpbmdzTXVzdEV4aXN0IGVycm9ycywgXFxsc3guZXh0ZW5zaW9ucywgY29uZmlnLmxzeC5leHRlbnNpb25zXG5cbiAgICAgICAgICAgIGlmIGNvbmZpZy5sc3guZXh0ZW5zaW9ucy5sZW5ndGggaXMgMFxuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoIFwibHN4LmV4dGVuc2lvbnMgY2Fubm90IGJlIGFuIGVtcHR5IGFycmF5XCJcblxuICAgIHJldHVybiBlcnJvcnNcblxuXG5jb21waWxlID0gKCBtaW1vc2FDb25maWcsIGZpbGUsIGNiICkgLT5cbiAgICBjb25zdCBjb2RlICAgICAgICAgPSBmaWxlLmlucHV0RmlsZVRleHRcbiAgICAgICAgICBvcHRpb25zICAgICAgPSBtaW1vc2FDb25maWcubHN4Lm9wdGlvbnNcbiAgICAgICAgICBjb2ZmZWUtcmVhY3QgPSByZXF1aXJlIFxcY29mZmVlLXJlYWN0LXRyYW5zZm9ybVxuICAgICAgICAgIGxpdmVzY3JpcHQgICA9IHJlcXVpcmUgXFxsaXZlc2NyaXB0XG5cbiAgICBvdXRwdXQgPSB0cnlcbiAgICAgICAgbGl2ZXNjcmlwdC5jb21waWxlICggY29mZmVlLXJlYWN0IGNvZGUgKSwgb3B0aW9uc1xuICAgIGNhdGNoIHtlcnJvcn1cblxuICAgIGNiIGVycm9yLCBvdXRwdXRcblxuXG5nZXRFeHRlbnNpb25zICA9ICggbWltb3NhQ29uZmlnICkgLT5cbiAgICBtaW1vc2FDb25maWcubHN4LmV4dGVuc2lvbnNcblxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gICAgbmFtZTogICAgICAgICBcXGxzeFxuICAgIGNvbXBpbGVyVHlwZTogXFxqYXZhc2NyaXB0XG4gICAgZXh0ZW5zaW9uczogICBnZXRFeHRlbnNpb25zXG4gICAgY29tcGlsZTogICAgICBjb21waWxlXG4gICAgZGVmYXVsdHM6ICAgICBjb25maWctZGVmYXVsdHNcbiAgICB2YWxpZGF0ZTogICAgIGNvbmZpZy12YWxpZGF0ZVxuIl19
